{"mappings":"AACO,IAkBIA,EAAS,CAACC,EAAO,KAC1BC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,CAACC,EAAIC,IAGrDD,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,KAGP,IC/BL,MAAMG,EAAWC,SAASC,IAEpBC,EAAU,CACZC,MAAOH,SAASI,cAAc,UAC9BC,QAASL,SAASI,cAAc,YAChCE,KAAMN,SAASI,cAAc,cAC7BG,OAAQP,SAASI,cAAc,iBAC/BI,SAAUR,SAASI,cAAc,cAErC,IAAIK,EAAS,KACTC,EAAW,KACf,MAAMC,EAAcC,OAAOC,SAASC,OAC9BC,EAAY,IAAIC,gBAAgBL,GA8EtC,SAASM,IACLL,OAAOM,SAAS,CACZC,IAAKjB,EAAQK,OAAOa,aAAeR,OAAOS,YAAc,IACxDC,SAAU,UAElB,CAlFIP,EAAUQ,IAAI,WACdd,EAASM,EAAUS,IAAI,UACvBd,EAAWe,eAAeC,QAAQ,YAClB,OAAbhB,EAmDP,WACIR,EAAQC,MAAMwB,UAAUC,IAAI,UAC5B1B,EAAQG,QAAQsB,UAAUE,OAAO,UACjC3B,EAAQI,KAAKqB,UAAUC,IAAI,UACV5B,SAASI,cAAc,aAC/B0B,iBAAiB,UAAWC,IACjCA,EAAEC,iBACF,MAAMC,EAAOF,EAAEG,OAAOC,SAASC,OAAOC,MAAMC,OAChC,KAATL,IACCR,eAAec,QAAQ,WAAYN,GACnCrB,OAAOC,SAAS2B,SACpB,GAER,CA/DQC,GAYR,WACIvC,EAAQC,MAAMwB,UAAUC,IAAI,UAC5B1B,EAAQG,QAAQsB,UAAUC,IAAI,UAC9B1B,EAAQI,KAAKqB,UAAUE,OAAO,UAE9B,MAAMa,EAAS,IAAIC,UAAU,kDAAkDlC,UAAeC,KAC9FgC,EAAOE,OAAS,KACZC,QAAQC,IAAI,WAEhBJ,EAAOK,QAAU,KACbF,QAAQC,IAAI,WAEhBJ,EAAOM,UAAYC,IACf,MAAMC,EAAOC,KAAKC,MAAMH,EAASI,MACjCR,QAAQC,IAAII,GAuCpB,SAAqBjB,EAAMoB,GACvB,MAAMC,EAAU,6BAA6BrB,aAAgBoB,QAC7DnD,EAAQK,OAAOgD,mBAAmB,YAAaD,GAC/CrC,GACJ,CA1CQuC,CAAYN,EAAKO,OAAQP,EAAKG,KAAI,EAEtCnD,EAAQM,SAASsB,iBAAiB,WAAW4B,IACzC,GAAe,UAAZA,EAAIC,IAAiB,CACpBD,EAAI1B,iBACJ,MAAM4B,EAAU1D,EAAQM,SAASqD,YACjB,KAAZD,IAEA1D,EAAQM,SAASqD,YAAc,GAC/BnB,EAAOoB,KAAKF,GAChB,IAEZ,CArCQG,KAIJtD,EAASpB,IAkCb,WACIa,EAAQC,MAAMwB,UAAUE,OAAO,UAC/B3B,EAAQG,QAAQsB,UAAUC,IAAI,UAC9B1B,EAAQI,KAAKqB,UAAUC,IAAI,UAC3B,MAAMA,EAAM5B,SAASI,cAAc,YAC7B4D,EAAWhE,SAASiE,cAAc,KACxCD,EAASE,KAAO,GAAGnE,YAAmBU,IACtCuD,EAASH,YAAc,GAAG9D,YAAmBU,IAC7CmB,EAAIuC,OAAOH,EACf,CA1CII,IAgEJxD,OAAOkB,iBAAiB,SAAUb","sources":["node_modules/nanoid/index.browser.js","src/js/index.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\nconst BASE_URL = document.URL;\nconst WS_URL = 'ws://tranquil-reaches-58824.herokuapp.com/';\nconst modules = {\n    getID: document.querySelector('.login'),\n    getNane: document.querySelector('.getname'),\n    chat: document.querySelector('.mainframe'),\n    output: document.querySelector('.historyframe'),\n    typearea: document.querySelector('.typearea')\n}\nlet chatID = null;\nlet userName = null;\nconst queryString = window.location.search;\nconst urlParams = new URLSearchParams(queryString);\nif( urlParams.has('slotID') ) {\n    chatID = urlParams.get('slotID');\n    userName = sessionStorage.getItem('userName');\n    if(userName === null) {\n        askName();\n    } else {\n        showChat();\n    }\n    \n} else {\n    chatID = nanoid();\n    showID();  \n}\n/* const chatID = urlParams.has('chatid') ? urlParams.get('chatid') : nanoid(); */\n\n\nfunction showChat() {\n    modules.getID.classList.add('hidden');\n    modules.getNane.classList.add('hidden');\n    modules.chat.classList.remove('hidden');\n\n    const socket = new WebSocket(`wss://tranquil-reaches-58824.herokuapp.com/?id=${chatID}&name=${userName}`);\n    socket.onopen = () => {\n        console.log('opened');\n    }\n    socket.onclose = () => {\n        console.log('closed');\n    }\n    socket.onmessage = response => {\n        const info = JSON.parse(response.data);\n        console.log(info);\n        postMessage(info.sender, info.data);\n    }\n    modules.typearea.addEventListener('keydown', evt => {\n        if(evt.key === 'Enter') {\n            evt.preventDefault();\n            const message = modules.typearea.textContent;\n            if( message !== \"\") {\n                /* console.log(message); */\n                modules.typearea.textContent = '';\n                socket.send(message);}\n            }\n    })\n}\nfunction showID() {\n    modules.getID.classList.remove('hidden');\n    modules.getNane.classList.add('hidden');\n    modules.chat.classList.add('hidden'); \n    const add = document.querySelector('.js-link');\n    const slotAddr = document.createElement('a');\n    slotAddr.href = `${BASE_URL}?slotID=${chatID}`;\n    slotAddr.textContent = `${BASE_URL}?slotID=${chatID}`;\n    add.append(slotAddr);\n}\nfunction askName() {\n    modules.getID.classList.add('hidden');\n    modules.getNane.classList.remove('hidden');\n    modules.chat.classList.add('hidden');\n    const nameForm = document.querySelector('.nameForm');\n    nameForm.addEventListener('submit', (e) => {\n        e.preventDefault();\n        const name = e.target.elements.myName.value.trim();\n        if(name !== '') {\n            sessionStorage.setItem('userName', name);\n            window.location.reload();\n        };\n    })\n}\n\nfunction postMessage(name, data) {\n    const newline = `<p><span class='chatname'>${name}:</span> ${data}</p>`;\n    modules.output.insertAdjacentHTML('beforeend', newline);\n    scrollBottom();\n}\n\nwindow.addEventListener('resize', scrollBottom);\n\nfunction scrollBottom() {\n    window.scrollTo({\n        top: modules.output.scrollHeight - window.innerHeight + 120,\n        behavior: 'smooth'\n    });\n}"],"names":["$f00a97eed1786a48$export$ac4959f4f1338dfc","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$8f6a480bb40b134f$var$BASE_URL","document","URL","$8f6a480bb40b134f$var$modules","getID","querySelector","getNane","chat","output","typearea","$8f6a480bb40b134f$var$chatID","$8f6a480bb40b134f$var$userName","$8f6a480bb40b134f$var$queryString","window","location","search","$8f6a480bb40b134f$var$urlParams","URLSearchParams","$8f6a480bb40b134f$var$scrollBottom","scrollTo","top","scrollHeight","innerHeight","behavior","has","get","sessionStorage","getItem","classList","add","remove","addEventListener","e","preventDefault","name","target","elements","myName","value","trim","setItem","reload","$8f6a480bb40b134f$var$askName","socket","WebSocket","onopen","console","log","onclose","onmessage","response","info","JSON","parse","data","newline","insertAdjacentHTML","$8f6a480bb40b134f$var$postMessage","sender","evt","key","message","textContent","send","$8f6a480bb40b134f$var$showChat","slotAddr","createElement","href","append","$8f6a480bb40b134f$var$showID"],"version":3,"file":"chat.69da149c.js.map"}