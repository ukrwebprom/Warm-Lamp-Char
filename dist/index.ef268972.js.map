{"mappings":"AACO,IAkBIA,EAAS,CAACC,EAAO,KAC1BC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,CAACC,EAAIC,IAGrDD,IAFFC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,KAGP,IC/BL,MAAMG,EAAWC,SAASC,IAEpBC,EAAU,CACZC,MAAOH,SAASI,cAAc,UAC9BC,QAASL,SAASI,cAAc,YAChCE,KAAMN,SAASI,cAAc,cAC7BG,OAAQP,SAASI,cAAc,iBAC/BI,SAAUR,SAASI,cAAc,cAErC,IAAIK,EAAS,KACTC,EAAW,KACf,MAAMC,EAAcC,OAAOC,SAASC,OAC9BC,EAAY,IAAIC,gBAAgBL,GAClCI,EAAUE,IAAI,WACdR,EAASM,EAAUG,IAAI,UACvBR,EAAWS,eAAeC,QAAQ,YAClB,OAAbV,EAiDP,WACIR,EAAQC,MAAMkB,UAAUC,IAAI,UAC5BpB,EAAQG,QAAQgB,UAAUE,OAAO,UACjCrB,EAAQI,KAAKe,UAAUC,IAAI,UACVtB,SAASI,cAAc,aAC/BoB,iBAAiB,UAAWC,IACjCA,EAAEC,iBACF,MAAMC,EAAOF,EAAEG,OAAOC,SAASC,OAAOC,MAAMC,OAChC,KAATL,IACCR,eAAec,QAAQ,WAAYN,GACnCf,OAAOC,SAASqB,SACpB,GAER,CA7DQC,GAYR,WACIjC,EAAQC,MAAMkB,UAAUC,IAAI,UAC5BpB,EAAQG,QAAQgB,UAAUC,IAAI,UAC9BpB,EAAQI,KAAKe,UAAUE,OAAO,UAE9B,MAAMa,EAAS,IAAIC,UAAU,kDAAkD5B,UAAeC,KAC9F0B,EAAOE,OAAS,KACZC,QAAQC,IAAI,WAEhBJ,EAAOK,QAAU,KACbF,QAAQC,IAAI,WAEhBJ,EAAOM,UAAYC,IACf,MAAMC,EAAOC,KAAKC,MAAMH,EAASI,OAsCzC,SAAqBpB,EAAMoB,GACvB,MAAMC,EAAU,6BAA6BrB,aAAgBoB,QAC7D7C,EAAQK,OAAO0C,mBAAmB,YAAaD,EACnD,CAxCQE,CAAYN,EAAKO,OAAQP,EAAKG,KAAI,EAEtC7C,EAAQM,SAASgB,iBAAiB,WAAW4B,IACzC,GAAe,UAAZA,EAAIC,IAAiB,CACpBD,EAAI1B,iBACJ,MAAM4B,EAAUpD,EAAQM,SAAS+C,YAAYvB,OAC7B,KAAZsB,IACApD,EAAQM,SAAS+C,YAAc,GAC/BnB,EAAOoB,KAAKF,GAChB,IAEZ,CAnCQG,KAIJhD,EAASpB,IAgCb,WACIa,EAAQC,MAAMkB,UAAUE,OAAO,UAC/BrB,EAAQG,QAAQgB,UAAUC,IAAI,UAC9BpB,EAAQI,KAAKe,UAAUC,IAAI,UAC3B,MAAMA,EAAMtB,SAASI,cAAc,YAC7BsD,EAAW1D,SAAS2D,cAAc,KACxCD,EAASE,KAAO,GAAG7D,YAAmBU,IACtCiD,EAASH,YAAc,GAAGxD,YAAmBU,IAC7Ca,EAAIuC,OAAOH,EACf,CAxCII","sources":["node_modules/nanoid/index.browser.js","src/js/index.js"],"sourcesContent":["export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import { nanoid } from 'nanoid';\r\nconst BASE_URL = document.URL;\r\nconst WS_URL = 'ws://tranquil-reaches-58824.herokuapp.com/';\r\nconst modules = {\r\n    getID: document.querySelector('.login'),\r\n    getNane: document.querySelector('.getname'),\r\n    chat: document.querySelector('.mainframe'),\r\n    output: document.querySelector('.historyframe'),\r\n    typearea: document.querySelector('.typearea')\r\n}\r\nlet chatID = null;\r\nlet userName = null;\r\nconst queryString = window.location.search;\r\nconst urlParams = new URLSearchParams(queryString);\r\nif( urlParams.has('slotID') ) {\r\n    chatID = urlParams.get('slotID');\r\n    userName = sessionStorage.getItem('userName');\r\n    if(userName === null) {\r\n        askName();\r\n    } else {\r\n        showChat();\r\n    }\r\n    \r\n} else {\r\n    chatID = nanoid();\r\n    showID();  \r\n}\r\n/* const chatID = urlParams.has('chatid') ? urlParams.get('chatid') : nanoid(); */\r\n\r\n\r\nfunction showChat() {\r\n    modules.getID.classList.add('hidden');\r\n    modules.getNane.classList.add('hidden');\r\n    modules.chat.classList.remove('hidden');\r\n\r\n    const socket = new WebSocket(`wss://tranquil-reaches-58824.herokuapp.com/?id=${chatID}&name=${userName}`);\r\n    socket.onopen = () => {\r\n        console.log('opened');\r\n    }\r\n    socket.onclose = () => {\r\n        console.log('closed');\r\n    }\r\n    socket.onmessage = response => {\r\n        const info = JSON.parse(response.data);\r\n        postMessage(info.sender, info.data);\r\n    }\r\n    modules.typearea.addEventListener('keydown', evt => {\r\n        if(evt.key === 'Enter') {\r\n            evt.preventDefault();\r\n            const message = modules.typearea.textContent.trim();\r\n            if( message !== \"\") {\r\n                modules.typearea.textContent = '';\r\n                socket.send(message);}\r\n            }\r\n    })\r\n}\r\nfunction showID() {\r\n    modules.getID.classList.remove('hidden');\r\n    modules.getNane.classList.add('hidden');\r\n    modules.chat.classList.add('hidden'); \r\n    const add = document.querySelector('.js-link');\r\n    const slotAddr = document.createElement('a');\r\n    slotAddr.href = `${BASE_URL}?slotID=${chatID}`;\r\n    slotAddr.textContent = `${BASE_URL}?slotID=${chatID}`;\r\n    add.append(slotAddr);\r\n}\r\nfunction askName() {\r\n    modules.getID.classList.add('hidden');\r\n    modules.getNane.classList.remove('hidden');\r\n    modules.chat.classList.add('hidden');\r\n    const nameForm = document.querySelector('.nameForm');\r\n    nameForm.addEventListener('submit', (e) => {\r\n        e.preventDefault();\r\n        const name = e.target.elements.myName.value.trim();\r\n        if(name !== '') {\r\n            sessionStorage.setItem('userName', name);\r\n            window.location.reload();\r\n        };\r\n    })\r\n}\r\n\r\nfunction postMessage(name, data) {\r\n    const newline = `<p><span class='chatname'>${name}:</span> ${data}</p>`;\r\n    modules.output.insertAdjacentHTML('beforeend', newline);\r\n}"],"names":["$f00a97eed1786a48$export$ac4959f4f1338dfc","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","$8f6a480bb40b134f$var$BASE_URL","document","URL","$8f6a480bb40b134f$var$modules","getID","querySelector","getNane","chat","output","typearea","$8f6a480bb40b134f$var$chatID","$8f6a480bb40b134f$var$userName","$8f6a480bb40b134f$var$queryString","window","location","search","$8f6a480bb40b134f$var$urlParams","URLSearchParams","has","get","sessionStorage","getItem","classList","add","remove","addEventListener","e","preventDefault","name","target","elements","myName","value","trim","setItem","reload","$8f6a480bb40b134f$var$askName","socket","WebSocket","onopen","console","log","onclose","onmessage","response","info","JSON","parse","data","newline","insertAdjacentHTML","$8f6a480bb40b134f$var$postMessage","sender","evt","key","message","textContent","send","$8f6a480bb40b134f$var$showChat","slotAddr","createElement","href","append","$8f6a480bb40b134f$var$showID"],"version":3,"file":"index.ef268972.js.map"}